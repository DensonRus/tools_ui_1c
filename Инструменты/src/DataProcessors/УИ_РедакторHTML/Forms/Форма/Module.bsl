&НаКлиенте
Перем ЗакрытиеФормыПодтверждено;

&НаКлиенте
Перем СохраненныеЗначенияРедаторов;

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РедакторJS=ТекстРедактораПоляРедактора("javascript");
	РедакторCSS=ТекстРедактораПоляРедактора("css");
	РедакторHTML=ТекстРедактораПоляРедактора("html");
	РедакторРезультирующегоHTML=ТекстРедактораПоляРедактора("html");
	РедакторСобытияДокументСформирован=ТекстРедактораПоляРедактора("bsl");
	РедакторСобытияПриНажатии=ТекстРедактораПоляРедактора("bsl");
	ВыводКонсолиРезультирующегоHTML=ТекстПоляКонсолиРезультата();
КонецПроцедуры
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ЗакрытиеФормыПодтверждено Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ГруппаСтраницыРезультирующегоHTMLПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаСтраницаКонсоль Тогда
		ОбновитьВыводКонсолиРезультата();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура РедакторHTMLДокументСформирован(Элемент)
	УстановитьТекстРедактораИзСохраненныхЗначений(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РедакторCSSДокументСформирован(Элемент)
	УстановитьТекстРедактораИзСохраненныхЗначений(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РедакторJSДокументСформирован(Элемент)
	УстановитьТекстРедактораИзСохраненныхЗначений(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РедакторРезультирующегоHTMLДокументСформирован(Элемент)
	УстановитьТекстРедактораИзСохраненныхЗначений(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РедакторСобытияДокументСформированДокументСформирован(Элемент)
	УстановитьТекстРедактораИзСохраненныхЗначений(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РедакторСобытияПриНажатииДокументСформирован(Элемент)
	УстановитьТекстРедактораИзСохраненныхЗначений(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура РезультирущийHTMLДокументСформирован(Элемент)
	ТекстАлготима=ТекстРедактораЭлемента(Элементы.РедакторСобытияДокументСформирован);
	Попытка
		Выполнить (ТекстАлготима);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура РезультирущийHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ТекстАлготима=ТекстРедактораЭлемента(Элементы.РедакторСобытияПриНажатии);
	Попытка
		Выполнить (ТекстАлготима);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область СобытияКомандФормы

&НаКлиенте
Процедура ОбновитьРезультирующийHTML(Команда)
	Если Элементы.ГруппаСтраницыРедактированияHTML.ТекущаяСтраница
		= Элементы.ГруппаСтраницаРежимаРедактированияВсеСразу Тогда

		HTML=
		"<!DOCTYPE html>
		|<html lang=""ru"">
		|<head>
		|<title>Результирующий HTML</title>";

		Для Каждого СтрокаБиблиотеки Из ПодключаемыеБиблиотеки Цикл
			Файл=Новый Файл(СтрокаБиблиотеки.Путь);
			Если НРег(Файл.Расширение) = ".css" Тогда
				HTML=HTML + "
							|<link rel=""stylesheet"" href=""" + СтрокаБиблиотеки.Путь + """ "
					+ СтрокаБиблиотеки.ДополнительныеПараметры + " >";
			Иначе
				HTML=HTML + "
							|<script src=""" + СтрокаБиблиотеки.Путь + """ type=""text/javascript"" charset=""utf-8"" "
					+ СтрокаБиблиотеки.ДополнительныеПараметры + "></script>";
			КонецЕсли;
		КонецЦикла;

		ТекстCSS=ТекстРедактораЭлемента(Элементы.РедакторCSS);
		Если ЗначениеЗаполнено(ТекстCSS) Тогда
			HTML=HTML + "
						|<style type=""text/css"">
						|" + ТекстCSS + "
										|</style>";
		КонецЕсли;
		HTML=HTML + "
					|</head>
					|<body>";
		ТекстHTML=ТекстРедактораЭлемента(Элементы.РедакторHTML);
		Если ЗначениеЗаполнено(ТекстHTML) Тогда
			HTML=HTML + "
						| " + ТекстHTML;
		КонецЕсли;

		ТекстJS=ТекстРедактораЭлемента(Элементы.РедакторJS);
		Если ЗначениеЗаполнено(ТекстJS) Тогда
			HTML=HTML + "
						|<script>
						| " + ТекстJS + "
										|</script>";
		КонецЕсли;
		HTML=HTML + "
					|</body>
					|</html>";

		РезультирущийHTML=HTML;
		УстановитьТекстРедактораЭлемента(Элементы.РедакторРезультирующегоHTML, РезультирущийHTML);
		УстановитьПоддержкуКонсолиВHTMLКод(РезультирущийHTML);		
		
	Иначе
		HTML=ТекстРедактораЭлемента(Элементы.РедакторРезультирующегоHTML);
		
		УстановитьПоддержкуКонсолиВHTMLКод(HTML);		
		РезультирущийHTML=HTML;
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ТиповаяБиблиотекаBootstrap4(Команда)
	ДобавитьЗаписьВПодключаемыеБибилиотеки("https://stackpath.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css",
		"integrity=""sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh"" crossorigin=""anonymous""");
	ДобавитьЗаписьВПодключаемыеБибилиотеки("https://code.jquery.com/jquery-latest.min.js",
		"integrity=""sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"" crossorigin=""anonymous""");
	ДобавитьЗаписьВПодключаемыеБибилиотеки("https://cdn.jsdelivr.net/npm/popper.js/dist/umd/popper.min.js",
		"integrity=""sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"" crossorigin=""anonymous""");
	ДобавитьЗаписьВПодключаемыеБибилиотеки("https://stackpath.bootstrapcdn.com/bootstrap/latest/js/bootstrap.min.js",
		"integrity=""sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"" crossorigin=""anonymous""");
КонецПроцедуры

&НаКлиенте
Процедура ТиповаяБиблиотекаJQuery(Команда)
	ДобавитьЗаписьВПодключаемыеБибилиотеки("https://code.jquery.com/jquery-latest.min.js",
		"integrity=""sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"" crossorigin=""anonymous""");
КонецПроцедуры

&НаКлиенте
Процедура ТиповаяБиблиотекаFontAwesome(Команда)
	ДобавитьЗаписьВПодключаемыеБибилиотеки(
		"https://stackpath.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css", "");
КонецПроцедуры

&НаКлиенте
Процедура ТиповаяБиблиотекаPoperJS(Команда)
	ДобавитьЗаписьВПодключаемыеБибилиотеки("https://unpkg.com/@popperjs/core@2", "");
КонецПроцедуры

&НаКлиенте
Процедура ТиповаяБиблиотекаResetCSS(Команда)
	ДобавитьЗаписьВПодключаемыеБибилиотеки("https://unpkg.com/reset-css/reset.css", "");
КонецПроцедуры
&НаКлиенте
Процедура ТиповаяБиблиотекаAnimateCSS(Команда)
	ДобавитьЗаписьВПодключаемыеБибилиотеки("https://cdn.jsdelivr.net/npm/animate.css/animate.min.css", "");
КонецПроцедуры

&НаКлиенте
Процедура ТиповаяБиблиотекаSocketIO(Команда)
	ДобавитьЗаписьВПодключаемыеБибилиотеки("https://cdn.jsdelivr.net/npm/socket.io-client/dist/socket.io.js", "");
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьВыводКонсоли(Команда)
	ОбновитьВыводКонсолиРезультата();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьПолеПросмотраНаВсюФорму(Команда)
	ПолеПросмотраРазвернутоНаВсюФорму=Не ПолеПросмотраРазвернутоНаВсюФорму;
	
	Если ПолеПросмотраРазвернутоНаВсюФорму Тогда
		Элементы.ГруппаСтраницыРезультирующегоHTML.ТекущаяСтраница=Элементы.ГруппаПредставлениеРезультирующегоHTML;
		Элементы.ГруппаСтраницыРезультирующегоHTML.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
		
		СохраненныеЗначенияРедаторов=Новый Структура;
		СохраненныеЗначенияРедаторов.Вставить("РедакторРезультирующегоHTML",ТекстРедактораЭлемента(Элементы.РедакторРезультирующегоHTML));
		СохраненныеЗначенияРедаторов.Вставить("РедакторHTML",ТекстРедактораЭлемента(Элементы.РедакторHTML));
		СохраненныеЗначенияРедаторов.Вставить("РедакторCSS",ТекстРедактораЭлемента(Элементы.РедакторCSS));
		СохраненныеЗначенияРедаторов.Вставить("РедакторJS",ТекстРедактораЭлемента(Элементы.РедакторJS));
		СохраненныеЗначенияРедаторов.Вставить("РедакторСобытияДокументСформирован",ТекстРедактораЭлемента(Элементы.РедакторСобытияДокументСформирован));
		СохраненныеЗначенияРедаторов.Вставить("РедакторСобытияПриНажатии",ТекстРедактораЭлемента(Элементы.РедакторСобытияПриНажатии));
	Иначе
		Элементы.ГруппаСтраницыРезультирующегоHTML.ОтображениеСтраниц=ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	Элементы.ГруппаСтраницыРедактированияHTML.Видимость=Не ПолеПросмотраРазвернутоНаВсюФорму;
	
КонецПроцедуры



#КонецОбласти

#Область СтандартныеПроцедурыИнструментов

&НаКлиенте
Процедура УстановитьПоддержкуКонсолиВHTMLКод(HTML)
	ПозицияНачалаШапки=СтрНайти(НРег(HTML), "<head>");
	Если ПозицияНачалаШапки=0 Тогда
		Возврат;
	КонецЕсли;
	НовыйТекст=Лев(HTML, ПозицияНачалаШапки+5);
	НовыйТекст=НовыйТекст+ТекстСкриптаДляПоддержкиКонсоли();
	НовыйТекст=НовыйТекст+Сред(HTML, ПозицияНачалаШапки+6);
	
	HTML=НовыйТекст;
КонецПроцедуры

&НаКлиенте
Функция ТекстСкриптаДляПоддержкиКонсоли()
	Текст=
	"<script type=""text/javascript"" charset=""utf-8"">
	|	console.output = []; // Из этого массива заберете все что вам нужно
	|	console.log = (function(log) {
	|		return function() {
	|			log.apply(console, arguments);
	|			console.output.push(arguments);
	|		}
	|	}(console.log));
	|
	|	function my__consoleOutput__string(){
	|		return JSON.stringify(console.output);
	|	}
	|</script>";
	Возврат Текст;
КонецФункции

&НаКлиенте
Функция СтруктураОписанияСохраняемогоФайла()
	Структура=УИ_ОбщегоНазначенияКлиент.ПустаяСтруктураОписанияВыбираемогоФайла();
	Структура.ИмяФайла=ИмяФайлаДанныхИнструмента;
	
//	УИ_ОбщегоНазначенияКлиент.ДобавитьФорматВОписаниеФайлаСохранения(Структура, "Данные редактора HTML(*.bslhtml)", "bslhtml");
	УИ_ОбщегоНазначенияКлиент.ДобавитьФорматВОписаниеФайлаСохранения(Структура, "Файл HTML(*.html)", "html");
	Возврат Структура;
КонецФункции
&НаКлиенте
Процедура ОткрытьФайл(Команда)
	УИ_ОбщегоНазначенияКлиент.ПрочитатьДанныеКонсолиИзФайла("РедактовHTML", СтруктураОписанияСохраняемогоФайла(),
		Новый ОписаниеОповещения("ОткрытьФайлЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Модифицированность=Ложь;
	ИмяФайлаДанныхИнструмента = Результат.ИмяФайла;

	ДанныеФайла=ПолучитьИзВременногоХранилища(Результат.Адрес);

	Текст=Новый ТекстовыйДокумент;
	Текст.Прочитать(ДанныеФайла.ОткрытьПотокДляЧтения());

	УстановитьТекстРедактораЭлемента(Элементы.РедакторCSS, "");
	УстановитьТекстРедактораЭлемента(Элементы.РедакторHTML, "");
	УстановитьТекстРедактораЭлемента(Элементы.РедакторJS, "");
	УстановитьТекстРедактораЭлемента(Элементы.РедакторРезультирующегоHTML, Текст.ПолучитьТекст());

	РезультирущийHTML="";

	УстановитьЗаголовок();

	Элементы.ГруппаСтраницыРедактированияHTML.ТекущаяСтраница= Элементы.ГруппаСтраницаРежимаРедактированияВсеСразу;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	СохранитьФайлНаДиск();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлКак(Команда)
	СохранитьФайлНаДиск(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлНаДиск(СохранитьКак = Ложь)
	УИ_ОбщегоНазначенияКлиент.СохранитьДанныеКонсолиВФайл("РедактовHTML", СохранитьКак,
		СтруктураОписанияСохраняемогоФайла(), ТекстРедактораЭлемента(Элементы.РедакторРезультирующегоHTML),
		Новый ОписаниеОповещения("СохранитьФайлЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлЗавершение(ИмяФайлаСохранения, ДополнительныеПараметры) Экспорт
	Если ИмяФайлаСохранения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяФайлаСохранения) Тогда
		Возврат;
	КонецЕсли;

	Модифицированность=Ложь;
	ИмяФайлаДанныхИнструмента=ИмяФайлаСохранения;
	УстановитьЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура НовыйФайл(Команда)
	ИмяФайлаДанныхИнструмента="";

	УстановитьТекстРедактораЭлемента(Элементы.РедакторCSS, "");
	УстановитьТекстРедактораЭлемента(Элементы.РедакторHTML, "");
	УстановитьТекстРедактораЭлемента(Элементы.РедакторJS, "");
	УстановитьТекстРедактораЭлемента(Элементы.РедакторРезультирующегоHTML, "");

	ПодключаемыеБиблиотеки.Очистить();

	УстановитьЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьИнструмент(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьИнструментЗавершение", ЭтаФорма), "Выйти из редактора?",
		РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьИнструментЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытиеФормыПодтверждено = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовок()
	Заголовок=ИмяФайлаДанныхИнструмента;
КонецПроцедуры

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьВыводКонсолиРезультата()
	Попытка
		ДокРезультатView=Элементы.РезультирущийHTML.Документ.defaultView;

		ДокView=Элементы.ВыводКонсолиРезультирующегоHTML.Документ.defaultView;
		ДокView.clearConsole();
		ДокView.outputInfo(ДокРезультатView.my__consoleOutput__string());
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ТекстРедактораПоляРедактора(Язык)
	Возврат УИ_РедакторКодаКлиентСервер.ТекстHTMLРедактораКода(Язык);
КонецФункции

&НаСервере
Функция ТекстПоляКонсолиРезультата()
	Текст=
	"<!DOCTYPE html>
	|<html>
	|    <head>
	|        <meta http-equiv=""content-type"" content=""text/html; charset=utf-8"" />
	|        <script type=""text/javascript"" src=""https://unpkg.com/html-console-output""></script>    
	|    </head>
	|    <body>
	|        <script type=""text/javascript"" charset=""utf-8"">
	|        	function clearConsole(){
	|				//document.body.innerHTML = "";
	|				var elems=document.getElementsByClassName('console-block');
	|				if (elems.length>0){
	|					elems[0].innerHTML='';
	|				}
	|			}
	|
	|			function outputInfo(info) {
	|				var objectInfo=JSON.parse(info);
	|				objectInfo.forEach(function(item, i, arr) {
	|					if (typeof item =='object') {
	|						var args=[]
	|						
	|						for (var key in item) {
	|							args.push(item[key]);
	|						}
	|						console.log.apply(console, args)
	|					} else {
	|						console.log(item)
	|					}
	|				});
	|			}
	|        </script>
	|    </body>
	|</html>";

	Возврат Текст;
КонецФункции


&НаКлиенте
Функция ТекстРедактораЭлемента(ЭлементПоляРедактора)
	Возврат УИ_РедакторКодаКлиентСервер.ТекстРедактораИзПоляРедактора(ЭлементПоляРедактора);
КонецФункции

&НаКлиенте
Процедура УстановитьТекстРедактораЭлемента(ЭлементПоляРедактора, ТекстУстановки)
	УИ_РедакторКодаКлиентСервер.УстановитьТекстРедактораЭлемента(ЭлементПоляРедактора, ТекстУстановки);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаписьВПодключаемыеБибилиотеки(Путь, ДополнительныеПараметры)
	НС=ПодключаемыеБиблиотеки.Добавить();
	НС.Путь=Путь;
	НС.ДополнительныеПараметры=ДополнительныеПараметры;
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьТекстРедактораИзСохраненныхЗначений(ЭлементРедатора)
	Если ТипЗнч(СохраненныеЗначенияРедаторов)<>Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеЗначенияРедаторов.Свойство(ЭлементРедатора.Имя) Тогда
		УстановитьТекстРедактораЭлемента(ЭлементРедатора, СохраненныеЗначенияРедаторов[ЭлементРедатора.Имя]);
	КонецЕсли;
КонецПроцедуры



#КонецОбласти

ЗакрытиеФормыПодтверждено=Ложь;